// requestAnimationFrame polyfill from https://github.com/darius/requestAnimationFrame
if (!Date.now)
    Date.now = function() { return new Date().getTime(); };

/*(function() {
    'use strict';

    var vendors = ['webkit', 'moz'];
    for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {
        var vp = vendors[i];
        window.requestAnimationFrame = window[vp+'RequestAnimationFrame'];
        window.cancelAnimationFrame = (window[vp+'CancelAnimationFrame']
        || window[vp+'CancelRequestAnimationFrame']);
    }
    if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) // iOS6 is buggy
        || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
        var lastTime = 0;
        window.requestAnimationFrame = function(callback) {
            var now = Date.now();
            var nextTime = Math.max(lastTime + 16, now);
            return setTimeout(function() { callback(lastTime = nextTime); },
                nextTime - now);
        };
        window.cancelAnimationFrame = clearTimeout;
    }
}());*/

(function($){
    $.snowfall = function(element, options){
        var flakes = [],
            defaults = {
                flakeCount : 15,
                flakeColor : '#ffffff',
                flakePosition: 'absolute',
                flakeIndex: 999999,
                minSize : 4,
                maxSize : 11,
                minSpeed : 1,
                maxSpeed : 4,
                deviceorientation : false,
                image :'/flake.png'
            },
            options = $.extend(defaults, options),
            random = function random(min, max){
                return Math.round(min + Math.random()*(max-min));
            };

        $(element).data("snowfall", this);

        // Snow flake object
        function Flake(_x, _y, _size, _speed){
            // Flake properties
            this.x  = _x;
            this.y  = _y;
            this.size = _size;
            this.speed = _speed;
            this.step = 0;
            this.stepSize = random(1,7) / 100;

            var flakeMarkup = null;

            flakeMarkup = document.createElement("img");
            flakeMarkup.src = options.image;

            $(flakeMarkup).attr({
                'class': 'snowfall-flakes',
            }).css({
                'width' : this.size,
                'height' : this.size,
                'position' : options.flakePosition,
                'top' : this.y,
                'left' : this.x,
                'fontSize' : 0,
                'zIndex' : options.flakeIndex
            });

            $(element).append($(flakeMarkup));

            this.element = flakeMarkup;

            // Update function, used to update the snow flakes, and checks current snowflake against bounds
            this.update = function() {
                
                this.y += this.speed;

                if(this.y > (elHeight) - (this.size  + 6)){
                    this.reset();
                }

                this.element.style.top = this.y + 'px';
                this.element.style.left = this.x + 'px';

                this.step += this.stepSize;

                this.x += doRatio === false ? Math.cos(this.step) : (doRatio + Math.cos(this.step));

                if(this.x + this.size > (elWidth) - widthOffset || this.x < widthOffset){
                    this.reset();
                }
            }

            // Resets the snowflake once it reaches one of the bounds set
            this.reset = function(){
                this.y = 0;
                this.x = random(widthOffset, elWidth - widthOffset);
                this.stepSize = random(1,7) / 100;
                this.size = random((options.minSize * 100), (options.maxSize * 100)) / 100;
                this.element.style.width = this.size + 'px';
                this.element.style.height = this.size + 'px';
                this.speed = random(options.minSpeed, options.maxSpeed);
            }
        }

        // local vars
        var i = 0,
            elHeight = $(element).height(),
            elWidth = $(element).width(),
            widthOffset = 30,
            snowTimeout = 0;

        // Bind the window resize event so we can get the innerHeight again
        $(window).bind("resize", function(){
            elHeight = $(element)[0].clientHeight;
            elWidth = $(element)[0].offsetWidth;
        });

        // initialize the flakes
        for(i = 0; i < options.flakeCount; i+=1){
            flakes.push(new Flake(random(widthOffset,elWidth - widthOffset), random(0, elHeight), random((options.minSize * 100), (options.maxSize * 100)) / 100, random(options.minSpeed, options.maxSpeed)));
        }

        // On newer Macbooks Snowflakes will fall based on deviceorientation
        var doRatio = false;
        if (options.deviceorientation) {
            $(window).bind('deviceorientation', function(event) {
                doRatio = event.originalEvent.gamma * 0.1;
            });
        }

        // this controls flow of the updating snow
        function snow(){
            for( i = 0; i < flakes.length; i += 1){
                flakes[i].update();
            }

            //snowTimeout = requestAnimationFrame(function(){snow()});
            snowTimeout = setTimeout(snow, 25);
        }

        snow();

        // clears the snowflakes
        this.clear = function(){
            $('.snowfall-canvas').remove();
            $(element).children('.snowfall-flakes').remove();
            //cancelAnimationFrame(snowTimeout);
        }
    };

    // Initialize the options and the plugin
    $.fn.snowfall = function(options){
        if(typeof(options) == "object" || options == undefined){
            return this.each(function(i){
                (new $.snowfall(this, options));
            });
        }else if (typeof(options) == "string") {
            return this.each(function(i){
                var snow = $(this).data('snowfall');
                if(snow){
                    snow.clear();
                }
            });
        }
    };
})(jQuery);